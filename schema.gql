# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Media {
  id: String!
  path: String!
  name: String!
  small: String
  medium: String
  mediumLarge: String
  large: String
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Restaurant {
  id: String!
  name: String!
  description: String!
  minPrice: Float!
  deliveryTime: String!
  rating: String!
  media: Media
  created_at: DateTime!
  updated_at: DateTime!
}

type Product {
  id: String!
  name: String!
  description: String!
  price: Float!
  weight: String!
  restaurant: Restaurant
  media: Media
  categories: [Category!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type Category {
  id: String!
  name: String!
  slug: String
  products: [Product!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type CategoryListConnection {
  list: [Category!]!
  page: Float!
  pageSize: Float!
  count: Float!
}

type RestaurantCategory {
  id: String!
  category: Category!
  restaurant: Restaurant!
  order: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type RestaurantListConnection {
  list: [Restaurant!]!
  page: Float!
  pageSize: Float!
  count: Float!
}

type ProductListConnection {
  list: [Product!]!
  page: Float!
  pageSize: Float!
  count: Float!
}

type SuggestionDataEntity {
  geo_lat: String
  geo_lon: String
  postal_code: String
  country: String
  country_iso_code: String
  region_fias_id: String
  region_kladr_id: String
}

type SuggestionEntity {
  value: String!
  unrestricted_value: String!
  data: SuggestionDataEntity!
}

type User {
  id: String!
  name: String
  phone: String!
  email: String
  address: String
  address_lat: String
  address_lon: String
  created_at: DateTime!
  updated_at: DateTime!
}

type OrderCart {
  id: String!
  orders: [Order!]!
  product: Product!
  quantity: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type OrderCustomer {
  id: String!
  name: String!
  phone: String!
  email: String!
  address: String!
  floor: String!
  office: String!
  apartment: String!
  additionalComment: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type OrderPayment {
  id: String!
  status: String!
  confirmation_url: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type Order {
  id: String!
  restaurant: Restaurant!
  user: User!
  orderCart: [OrderCart!]!
  orderCustomer: OrderCustomer!
  orderPayment: OrderPayment!
  date: String!
  total: Float!
  orderNumber: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type Manager {
  id: String!
  login: String!
  password: String!
  name: String
  phone: String
  email: String
  restaurant: Restaurant
  role: String!
  media: Media
  created_at: DateTime!
  updated_at: DateTime!
}

type Cars {
  id: String!
  name: String!
  image: String!
  enginePower: String!
  manufacturer: String!
  yearOfProduction: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type PositionEntity {
  latitude: Float
  longitude: Float
  type: String
  name: String
  number: Float
  postal_code: String
  street: String
  confidence: Float
  region: String
  region_code: String
  county: String
  locality: String
  administrative_area: String
  neighbourhood: String
  country_code: String
  continent: String
  label: String
}

input OneBunchInput {
  id: String!
  order: Float!
}

input AddOrderCartInput {
  product: String!
  productName: String!
  quantity: Float!
}

input AddOrderCustomerInput {
  name: String!
  phone: String!
  email: String!
  address: String!
  floor: String!
  office: String!
  apartment: String!
  additionalComment: String!
}

type Query {
  findCategories(data: GraphQLGeneralRequest!): CategoryListConnection!
  findOneCategory(id: String!): Category!
  findByKeyCategories(data: FindByKeyInput!): [Category!]!
  findMedia: [Media!]!
  findOneMedia(id: String!): Media!
  findRestaurants(data: GraphQLGeneralRequest!): RestaurantListConnection!
  findOneRestaurant(id: String!): Restaurant!
  findByKeyRestaurants(data: FindByKeyInput!): [Restaurant!]!
  findByKeyResCat(data: FindByKeyInput!): [RestaurantCategory!]!
  findProducts(data: GraphQLGeneralRequest!): ProductListConnection!
  findOneProduct(id: String!): Product!
  findByKeyProducts(data: FindByKeyInput!): [Product!]!
  findByResCatCombProducts(data: FindByResCatCombInput!): [Product!]!
  findPossibleAddresses(address: String!): [SuggestionEntity!]!
  findUsers: [User!]!
  getUserByToken(token: String!): User!
  findOrders: [Order!]!
  findOneOrder(id: String!): Order!
  findByKeyOrders(data: FindByKeyInput!): [Order!]!
  findManagers: [Manager!]!
  findOneManager(id: String!): Manager!
  findByKeyManagers(data: FindByKeyInput!): [Manager!]!
  getManagerByToken(token: String!): Manager!
  findOnlyManagers: [Manager!]!
  findCars: [Cars!]!
  findOneCar(id: String!): Cars!
  findPosition(address: String!): [PositionEntity!]!
}

input GraphQLGeneralRequest {
  page: Int
  pageSize: Int
}

input FindByKeyInput {
  field: String!
  value: String!
}

input FindByResCatCombInput {
  restaurant: String!
  category: String!
}

type Mutation {
  createCategory(data: AddCategoryInput!): Category!
  deleteCategory(id: String!): Boolean!
  updateCategory(id: String!, data: UpdateCategoryInput!): Category!
  createMedia(file: Upload!): Media!
  deleteMedia(id: String!): Media!
  createRestaurant(data: AddRestaurantInput!): Restaurant!
  deleteRestaurant(id: String!): Boolean!
  updateRestaurant(id: String!, data: UpdateRestaurantInput!): Restaurant!
  updateResCatBunch(data: UpdateBunchInput!): Boolean!
  createProduct(data: AddProductInput!): Product!
  deleteProduct(id: String!): Boolean!
  updateProduct(id: String!, data: UpdateProductInput!): Product!
  updateUser(id: String!, data: UpdateUserInput!): Boolean!
  authenticationUser(data: AuthenticationInput!): String!
  createOTP(data: CreateOTPInput!): Boolean!
  checkOTP(data: CheckOTPInput!): Boolean!
  createOrder(data: AddOrderInput!): Order!
  deleteOrder(id: String!): Boolean!
  updatePaymentStatus(data: UpdatePaymentStatusDTO!): Boolean!
  loginManager(data: AuthManagerInput!): String!
  createManager(data: AuthManagerInput!): Manager!
  updateManager(id: String!, data: UpdateManagerInput!): Boolean!
  createCars(data: AddCarsInput!): Cars!
  updateCars(id: String!, data: UpdateCarsInput!): Cars!
  deleteCars(id: String!): Boolean!
}

input AddCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String
  slug: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AddRestaurantInput {
  name: String!
  description: String!
  minPrice: String!
  deliveryTime: String!
  rating: String!
  media: String!
}

input UpdateRestaurantInput {
  name: String
  description: String
  minPrice: String
  deliveryTime: String
  rating: String
  media: String
}

input UpdateBunchInput {
  bunch: [OneBunchInput!]!
}

input AddProductInput {
  name: String!
  description: String!
  price: String!
  weight: String!
  restaurant: String!
  media: String!
  categories: [String!]!
}

input UpdateProductInput {
  name: String
  description: String
  price: String
  weight: String
  restaurant: String
  media: String
  categories: [String!]
}

input UpdateUserInput {
  name: String
  phone: String
  email: String
  address: String
  address_lat: String
  address_lon: String
}

input AuthenticationInput {
  phone: String!
  code: String!
  sessionID: String!
}

input CreateOTPInput {
  value: String!
  sessionID: String!
  typeOfOTP: OTPEnumType!
}

enum OTPEnumType {
  PHONE
  EMAIL
}

input CheckOTPInput {
  code: String!
  sessionID: String!
}

input AddOrderInput {
  date: String!
  total: Float!
  restaurant: String!
  user: String!
  orderCart: [AddOrderCartInput!]!
  orderCustomer: AddOrderCustomerInput!
}

input UpdatePaymentStatusDTO {
  id: String!
  status: String!
}

input AuthManagerInput {
  login: String!
  password: String!
}

input UpdateManagerInput {
  name: String
  phone: String
  email: String
  restaurant: String
  media: String
}

input AddCarsInput {
  name: String!
  enginePower: String!
  image: String!
  manufacturer: String!
  yearOfProduction: Float!
}

input UpdateCarsInput {
  name: String
  enginePower: String
  image: String
  manufacturer: String
  yearOfProduction: Float
}